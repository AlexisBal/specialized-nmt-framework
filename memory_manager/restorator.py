"""
Restorator
Charge la m√©moire des donn√©es d√©j√† apprises stock√©es dans le dictionnaire appris
Appel√© au d√©but de chaque batch
"""

import json
import os
from collections import defaultdict, Counter


def restore_learned_dictionary(learned_dictionary_path):
    """
    Restaure le dictionnaire d'apprentissage sauvegard√© par memorisator.
    
    Args:
        learned_dictionary_path: Chemin du fichier de sauvegarde
    
    Returns:
        tuple: (learned_dictionary, cumulative_cooccurrences, verses_processed)
    """
    try:
        # Charger le dictionnaire
        with open(learned_dictionary_path, 'r', encoding='utf-8') as f:
            learned_dictionary = json.load(f)
        
        # Restaurer les co-occurrences
        cumulative_cooccurrences = defaultdict(Counter)
        verses_processed = 0
        
        if 'cumulative_data' in learned_dictionary:
            # Reconstituer les co-occurrences
            saved_cooc = learned_dictionary['cumulative_data'].get('cooccurrences', {})
            for source_term, target_term_counts in saved_cooc.items():
                cumulative_cooccurrences[source_term].update(target_term_counts)
            
            # R√©cup√©rer le compteur de versets
            verses_processed = learned_dictionary['cumulative_data'].get('verses_processed', 0)
        
        print(f"üîÑ Dictionnaire restaur√©: {len(learned_dictionary.get('source_term_entry', {}))} termes, {verses_processed} versets")
        
        return learned_dictionary, cumulative_cooccurrences, verses_processed
        
    except FileNotFoundError:
        print(f"üìù Aucun dictionnaire trouv√©, utiliser initialisator.py")
        return None, None, None
